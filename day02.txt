git으로 버전 관리하기  
1. local repository 만들기
    1. cmd로 local repository로 만들고 싶은 폴더로 ㅇ동
        cd 명령어 사용

        ..은 상위폴더를 의미한다

    visual studio code terminal 활용하기
        상단 terminal 탭 > new terminal

        visual studio code terminal 종료하기
            terminal 창 쓰레기통 아이콘 클릭
            (x 버튼을 클릭하면 화면상에서만 안보일 뿐 종료된 것이 아님)

    git bash here
        원하는 폴더로 들어가서 마우스 우클릭 git bash here 클릭

    terminal, cmd, git bash 사용이 완료되면
    잘 종료를 시켜줘야 한다.


    2. git init
        git init 명령어를 실행하면 해당 폴더가 버전관리를 할 수 있는 폴더로 변경된다
        .git 이라는 폴더가 새롭게 생성이 되면 성공
        .git은 숨김폴더로 설정되어 있음

        .git 폴더 속에는 버전관리를 위한 여러가지 폴더와 파일들이 들어있으며
        .git 폴더를 삭제하면 버전관리를 할 수 있는 깃 저장소가 아닌 일반폴더가 되어버린다
        (이때는 git init을 다시 실행)

        git init은 깃 저장소로 만들기 위해 최초 1회만 실행 


2. git stage에 수정사항 올리기

깃의 작동원리
    깃은 논리적으로 working tree / stage / repository로 나누어 파일들을 관리

working tree
    실질적으로 내가 작업하는 작업 공간
    작업공간에서 새롭게 만든 파일들을 기본적으로 git이 추적하지 못하는 상태 (untracked)
    스테이지에 올라가지 않은 상태 (unstage)

stage
    파일을 stage에 올리는 방법 (tracked 상태로 만드는 방법)
        git add 파일 이름

    add 명령어가 적용된 파일들은 모드 tracked 상태가 되며 stage에 올라간 상태가 된다
    이때 stage에 올라가 있는 파일을 수정 (추가, 삭제) 했다면 add를 실행했을 당시와
    다른 상태가 된다 이를 인지하고 modified 상태가 되었다고 판단하며
    modified 된 상태는 tracked 상태지만 unstage 상태

stage에 올라와 있는 상황을 영구적으로 저장 : commit 
    커밋을 하게 되면 "stage에 올라와 있는 상태" 그대로 영구 저장된다

-m 옵션 : 메세지를 간단히 작성할 수 있는 옵션
git commit -m "커밋 메세지"
    커밋을 할 때 작성하고 싶은 메세지를 쌍따옴표 안쪽에 써준다
    이때. commit은 stage에 올라와 있는 상태가 영구적으로 저장된다 !!!!

-a 옵션
    git commit -a 
        add는 자동으로 되고, 커밋 메세지 작성하는 에디터 열림
    git commit -am "커밋메세지"
        add도 자동 커밋메세지도 간단히 작성

git status 
    git 저장소의 상태를 확인해줘

git add 파일이름
    해당파일을 stage에 올려줘
    untracked(git 저장소에서 새롭게 만든 파일) 파일들은 tracked 상태로 변경되고
    stage에 해당 내용들이 올라간다 (stage 상태가 된다)

    파일 이름 자리에 *을 사용하면 모든 요소들을 의미한다
    git add *

전역 (전체영역) git 사용자 계정 정보 입력하기
    git config --global user.name "닉네임"
        닉네임 설정
    git config --global user.email "이메일"
        이메일 설정

작업 공간 내에 git 사용자 계정 정보 입력 (입력 안되어있으면 전역에 입력된 닉네임과 이메일 따라간다)
    git config user.name "닉네임"
    git config user.email "이메일"

계정정보 확인하기
    git config user.name
    git config user.email

git과 github 연결하기
    1. github내 로컬 저장소와  연결할 원격 저장소 (repository) 만들기
        우측 상단 프로필 클릭 > your repositories > New 클릭 > 레포지토리 이름 설정 > create repository 버튼

    2. 로컬저장소와 원격저장소 연결
        terminal에서
            git remote add 원격저장소별칭 원격저장소주소

    연결완료 (최초 한번만)

평소에 깃 허브에 업로드하는 과정
    수정 (unstage, tracked), 새롭게 만든 파일 (unstage, untracked)
    add 하여 모든 수정사항 stage로 만들기
    commit하여 stage에 올라간 상태를 영구저장
    push 하여 commit된 상태를 github에 업로드하기
    
